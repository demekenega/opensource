<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_oss_share_code" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>On Sharing Source Code</title>
  <introduction>
	<p>
		Obviously, not all software is FOSS.
	</p>
  </introduction>


	<subsection xml:id="source-code-to-share-or-not-to-share">
		<title>Source Code: To Share, or Not To Share?</title>

		<p>
			Most software developers do not share their source code — especially companies that produce software with the intention of selling software to their customers. Microsoft, for example, does not share the source code for the Windows operating system.
		</p>

		<p>
			Even freeware — programs that are downloadable for free from the internet — may not share their source code with the world. You can get the program for free, but if it breaks, or if you think of a way to make it better, there’s no good way to fix it if you don't have the source code. For example, you can get the Flash Player from Adobe for free, but if you find a bug that crashes Firefox, you’re stuck with that bug until Adobe fixes it.
		</p>

		<p>
			There are definite advantages to keeping source code hidden, especially if your goal is to sell the software itself. It’s harder to sell a software program when anyone is free to take the source code and use it for any purpose. If Microsoft were to release the Windows source code under an open source software license, anyone would then be able to take that source code, build “Bob’s Own Operating System,” maybe make a few changes, and then re-sell that product as a competitor to Microsoft Windows. Obviously, most companies who are selling commercial software don’t want that to happen.
		</p>
    </subsection>


	<subsection xml:id="the-value-of-sharing">
		<title><term>The value of sharing</term></title>

		<p>
			That’s not to say that programmers who write open source software never make money. Some of the most successful companies in the world use open source software to power their businesses. Google, Amazon, Wall Street, the US Department of Defense — some of the world’s largest and most innovative companies, government agencies, and industries are writing software using FOSS every day. They don’t sell that code; they share it, and by sharing, create more value for their organizations.
		</p>

		<p>
			The amazing thing about contributing to FOSS software is that you don’t have to work for a large company to see the benefits of working in a free and open manner. As a developer, you might write a utility that solves a particular problem. By sharing it, others might discover the utility of your tool. Others might extend it and help see it grow. At this point, what started as a hack has become something valuable for many. At this point, we begin to see how FOSS development practices can provide demonstrable advantages over proprietary software development practices. Among them:
		</p>

		<p><ul>
			<li>
			<term>Shared development cost</term>. Writing software can be expensive, at least in terms of time. Good software takes time to develop, and time is money. And if writing software is expensive, then maintaining it is even more expensive. In the FOSS model, the cost of the writing and maintaining the software can be spread out over several individuals and/or companies.
			</li>
			<li>
			<term>Users can fix their own bugs</term>. This is not a freedom that is obviously useful to everybody. Not every software user is knowledgeable enough to fix a bug when they find it. That’s fine; FOSS also means that users can find other people to fix their bugs for them. Not everybody who owns a car is competent to change their own oil, but the freedom to change your oil, or fix a flat tire, or rebuild your own brakes — or the freedom to be able to go to any mechanic or any mechanically inclined friend and ask them to do it for you — is a crucial freedom to car owners. FOSS extends that freedom to software.
			</li>
			<li>
			<term>(Arguably) better and (potentially) more secure software.</term> Allowing users to fix bugs can often lead to better and potentially more secure software. One of the problems with proprietary software is that there’s a limit to the number of people companies can pay to fix code — that limit is usually directly proportional to how many software licenses the company can sell. OSS projects have the potential to build a huge base of participants, far greater than the number of developers that any one company could pay. The Apache HTTP server project is a great example of an OSS project with many developers, both commercial and independent — that has created <url href="http://news.netcraft.com/archives/web_server_survey.html"  visual="news.netcraft.com/archives/web_server_survey.html">demonstrably more popular</url> and arguably better and more secure software than any of its proprietary counterparts.
			</li>
			<li>
			<term>Software that outlives its creator.</term> There are literally thousands and thousands of pieces of software, written for outdated computers, that are no longer useful for any purpose. If we had source code for these pieces of software, we might be able to extend them to new computers, making them continually more useful and more interesting — but because we don’t have the source code for these programs, we have very little use for them anymore. There’s a word for this kind of software: abandonware. In FOSS, there’s no such thing as <em>abandonware</em>. Sure, people may stop working on a piece of software, but the source is always there, ready to be picked up and carried forward by anyone who has the time and interest to do so. Every dead FOSS project has a chance to be reborn.
			</li>
			<li>
			<term>The freedom to fork.</term> Sometimes software projects go wrong. If a project is proprietary, no one has any recourse if they don’t like the direction of the project: the owner of the project decides the direction of the project, period. But because FOSS guarantees everybody the right to redistribute and modify the source code, developers can always take a FOSS project and move it in a new direction, without anybody’s permission. This process is called <em>forking</em>. Forks are usually regarded as last resorts, since contentious forks can divide scarce developer resources and confuse users. However, a number of FOSS projects have benefited greatly from forks; the <url href="http://en.wikipedia.org/wiki/XFree86#Forks_of_XFree86" visual="wikipedia.org/wiki/XFree86#Forks_of_XFree86">X.org server</url> and <url href="http://en.wikipedia.org/wiki/Inkscape" visual="http://en.wikipedia.org/wiki/XFree86#Forks_of_XFree86">Inkscape</url> are notable successful forks.
			</li>

		</ul></p>
      </subsection>


	<exercise xml:id="exercise-list-of-software">
		<title>Exercise: List of software</title>
		<p>
			Create a list of all the software that you use on a regular basis. Which software is OSS? Which applications have OSS equivalents? What are those equivalents?
		</p>

	</exercise>

	<exercise xml:id="exercise-compare-and-contrast-proprietary-and-foss-software">
		<title>Exercise: Compare and contrast similar proprietary and OSS software</title>
		<p>
			Choose one piece of proprietary software that you use regularly and find its OSS equivalent if it has one. (If not, pick another program.) Write a blog post comparing the two. Don’t just look at the code; look at the entire experience. How are the user interfaces different or similar? What about the user’s experience overall? Is the quality of the documentation comparable? Is one buggier than the other? (This may take some spelunking in forums, looking for bug reports, etc?)
		</p>

		<p>
			What, in your estimation, would it take for a new user to switch from the proprietary, closed-source software to the FOSS equivalent?
		</p>

		</exercise>

		<exercise xml:id="exercise-install-new-foss-tool-and-blog-about-it">
		<title>Exercise: Install a new OSS tool and blog about it</title>

		<p>
			Go find a new piece of open source software that interests you. Install it, and blog about any problems that you have. Bear in mind that your notes may come in handy during later exercises.
		</p>

		</exercise>
		<exercise xml:id="Sharecode2">
			<statement>
			  <p>
				How does the availability of source code in FOSS projects prevent software from becoming “abandonware”?
			  </p>
			</statement>
			<choices randomize ="yes">
			  <choice  correct = "yes">
				<statement>
				  <p>
					Once open-source code is created, it is open to the public, allowing multiple developers and communities to continue its development and maintenance.
				  </p>
				</statement>
				<feedback>
				  <p>
					Open Source code’s availability to the public encourages constant collaboration from the users preventing the software from becoming “abandonware”.
				</p>
				</feedback>
			  </choice>
			  <choice>
				<statement>
				  <p>
					The source code will be sold by the developers to endure development costs and prevent it from becoming “abandonware”.
				  </p>
				</statement>
				<feedback>
				  <p>
					Selling the software to endure development costs will not prevent it from becoming abandonware. 
				  </p>
				</feedback>
			  </choice>
			  <choice>
				<statement>
				  <p>
					The source code will be encrypted and only accessible to authorized developers, ensuring its ongoing development and value.
				  </p>
				</statement>
				<feedback>
				  <p>
					FOSS’s source code must be accessible to the public with or without authorized developers’ permission. Therefore, the source code will receive constant collaboration and development from a diverse group of developers, preventing the software from becoming “abandonware.”
				  </p>
				</feedback>
			  </choice>
			  <choice>
				<statement>
				  <p>
					The source code will be kept secret and protected by intellectual property laws to avoid becoming “abandonware.”
				</p>
				</statement>
				<feedback>
				  <p>
					No, the source code of a FOSS project will never be inaccessible to the public, or otherwise it will lose the value of a FOSS project. Intellectual property laws have no interference with keeping software from becoming “abandonware”. 
				  </p>
				</feedback>
			  </choice>
			</choices>
		  </exercise>
</section>


